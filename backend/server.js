const express = require("express");
const sqlite3 = require("sqlite3").verbose();
const cors = require("cors");
const path = require("path");

const app = express();
const PORT = 3001;

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è CORS
app.use(cors());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const dbPath = path.resolve(__dirname, "excursions.db");
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏:", err.message);
  } else {
    console.log("–ë–∞–∑—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ ");
  }
});

// –†–æ—É—Ç: –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –µ–∫—Å–∫—É—Ä—Å—ñ—ó
app.get("/api/excursions", (req, res) => {
  db.all("SELECT * FROM Excursions", [], (err, rows) => {
    if (err) {
      res.status(500).json({ error: err.message });
    } else {
      res.json(rows);
    }
  });
});

app.get("/api/excursions/:route", (req, res) => {
  const route = req.params.route;
  db.get("SELECT * FROM Excursions WHERE route = ?", [route], (err, row) => {
    if (err) {
      res.status(500).json({ error: err.message });
    } else if (!row) {
      res.status(404).json({ error: "–ï–∫—Å–∫—É—Ä—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    } else {
      res.json(row);
    }
  });
});

app.use(express.json()); // –î–æ–¥–∞—Ç–∏, —è–∫—â–æ —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ

app.post("/api/login", (req, res) => {
  const { email, password } = req.body;

  db.get(
    "SELECT * FROM Users WHERE email = ? AND password = ?",
    [email, password],
    (err, user) => {
      if (err) {
        res.status(500).json({ error: "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
      } else if (!user) {
        res.status(401).json({ error: "–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å" });
      } else {
        // –ü—Ä–æ—Å—Ç–∏–π —Ç–æ–∫–µ–Ω (—É —Ä–µ–∞–ª—å–Ω–∏—Ö –ø—Ä–æ—î–∫—Ç–∞—Ö ‚Äî JWT)
        const token = `${user.id}-${Date.now()}`;
        res.json({ token, userId: user.id, email: user.email });
      }
    }
  );
});

app.post("/api/passed", express.json(), (req, res) => {
  const { userEmail, excursionId } = req.body;
  db.run(
    "INSERT INTO PassedExcursions (userEmail, excursionId) VALUES (?, ?)",
    [userEmail, excursionId],
    function (err) {
      if (err) return res.status(500).json({ error: err.message });
      res.json({ message: "–ï–∫—Å–∫—É—Ä—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ", id: this.lastID });
    }
  );
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ –µ–∫—Å–∫—É—Ä—Å—ñ—ó
app.get("/api/passed/:userEmail", (req, res) => {
  const { userEmail } = req.params;

  const query = `
    SELECT Excursions.*
    FROM PassedExcursions
    JOIN Excursions ON PassedExcursions.excursionId = Excursions.id
    WHERE PassedExcursions.userEmail = ?
  `;

  db.all(query, [userEmail], (err, rows) => {
    if (err) {
      res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö" });
    } else {
      res.json(rows);
    }
  });
});

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.use(express.json()); // –í–ê–ñ–õ–ò–í–û! –º–∞—î –±—É—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É

app.post("/api/register", (req, res) => {
  const { email, password } = req.body;
  console.log("üì• –î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:", email, password);

  if (!email || !password) {
    return res.status(400).json({ error: "–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—Ç—É —Ç–∞ –ø–∞—Ä–æ–ª—å." });
  }

  db.get("SELECT * FROM Users WHERE email = ?", [email], (err, row) => {
    if (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err.message);
      return res
        .status(500)
        .json({ error: "–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞." });
    }

    if (row) {
      console.log("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î:", email);
      return res.status(400).json({ error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î." });
    }

    db.run(
      "INSERT INTO Users (email, password) VALUES (?, ?)",
      [email, password],
      function (err) {
        if (err) {
          console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", err.message);
          return res
            .status(500)
            .json({ error: "–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞." });
        }

        console.log("‚úÖ –£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:", email);
        res.status(200).json({ message: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞." });
      }
    );
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${PORT}`);
});
